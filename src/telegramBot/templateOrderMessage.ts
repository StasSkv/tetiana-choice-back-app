import Handlebars from 'handlebars';

const templateString = `
üì¶ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{{orderNumber}}*

üë§ *–ö–ª—ñ—î–Ω—Ç:*
‚Ä¢ –Ü–º'—è: {{name}}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {{phone}}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {{formatAuthorization authorization}}

üõí *–¢–æ–≤–∞—Ä–∏:*
{{#each products}}
  {{increment @index}}. {{this.name}} ‚Äî {{this.quantity}} —à—Ç. √ó {{this.price}} –≥—Ä–Ω ({{this.points}} –±–∞–ª—ñ–≤, —Ü—ñ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {{this.pricePartner}} –≥—Ä–Ω)
{{/each}}

üí∞ *–ü—ñ–¥—Å—É–º–∫–∏:*
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {{totalPrice}} –≥—Ä–Ω
‚Ä¢ –î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {{totalPriceForPartner}} –≥—Ä–Ω
‚Ä¢ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–∞–ª—ñ–≤: {{totalPoints}}

üí≥ *–û–ø–ª–∞—Ç–∞:* {{formatPaymentMethod paymentMethod}}

üè† *–û–¥–µ—Ä–∂—É–≤–∞—á:*
{{#if recipient}}
‚Ä¢ –Ü–º'—è: {{recipient.fullName}}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {{recipient.phone}}
‚Ä¢ –ú—ñ—Å—Ç–æ: {{recipient.city}}
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {{formatDeliveryMethod recipient.deliveryMethod}}
‚Ä¢ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {{recipient.department}}
{{else}}
(–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö)
{{/if}}

üìÖ *–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* {{formatDate createdAt}}
`;


Handlebars.registerHelper('increment', function (value, options) {
  return parseInt(value) + 1;
});

Handlebars.registerHelper('formatDate', function (datetime) {
  const date = new Date(datetime);
  const dd = String(date.getDate()).padStart(2, '0');
  const mm = String(date.getMonth() + 1).padStart(2, '0');
  const yyyy = date.getFullYear();
  const hh = String(date.getHours()).padStart(2, '0');
  const min = String(date.getMinutes()).padStart(2, '0');
  return `${dd}.${mm}.${yyyy} ${hh}:${min}`;
});

Handlebars.registerHelper('formatDeliveryMethod', function (method) {
  const map = {
    Nova_Poshta: '–ù–æ–≤–∞ –ü–æ—à—Ç–∞',
    Ukrposhta: '–£–∫—Ä–ø–æ—à—Ç–∞',
    Self: '–°–∞–º–æ–≤–∏–≤—ñ–∑',
  };
  return map[method as keyof typeof map] || '–ù–µ–≤—ñ–¥–æ–º–æ';
});

Handlebars.registerHelper('formatPaymentMethod', function (method) {
  const map = {
    card: '–ö–∞—Ä—Ç–∫–∞',
    cash: '–ì–æ—Ç—ñ–≤–∫–∞',
    overpayment: '–ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞',
  };
  return map[method as keyof typeof map] || '–ù–µ–≤—ñ–¥–æ–º–æ';
});

Handlebars.registerHelper('formatAuthorization', function (auth) {
  return auth ? '–¢–∞–∫' : '–ù—ñ';
});

export const templateOrderMessage = Handlebars.compile(templateString);
